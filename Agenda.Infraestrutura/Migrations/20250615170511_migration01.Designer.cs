// <auto-generated />
using System;
using Agenda.Infraestrutura.Contextos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Agenda.Infraestrutura.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20250615170511_migration01")]
    partial class migration01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Agenda.Dominio.Entidades.Agendamento", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("Aceito")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdDisponibilidade")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUsuarioCliente")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdDisponibilidade");

                    b.HasIndex("IdUsuarioCliente");

                    b.ToTable("Agendamentos");
                });

            modelBuilder.Entity("Agenda.Dominio.Entidades.Disponibilidade", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("HoraFim")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<long>("IdServico")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdServico");

                    b.ToTable("Agendas");
                });

            modelBuilder.Entity("Agenda.Dominio.Entidades.Endereco", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<long>("IdUsuario")
                        .HasColumnType("bigint");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("Agenda.Dominio.Entidades.Servico", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IdUsuario")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Servicos");
                });

            modelBuilder.Entity("Agenda.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("Administrador")
                        .HasColumnType("bit");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 202506151705100001L,
                            Administrador = false,
                            Ativo = false,
                            Email = "denilson.analistasist@gmail.com",
                            Nome = "Denilson",
                            Senha = "senha01"
                        });
                });

            modelBuilder.Entity("Agenda.Dominio.Entidades.Agendamento", b =>
                {
                    b.HasOne("Agenda.Dominio.Entidades.Disponibilidade", "Disponibilidade")
                        .WithMany("Agendamentos")
                        .HasForeignKey("IdDisponibilidade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agenda.Dominio.Entidades.Usuario", "UsuarioCliente")
                        .WithMany("Agendamentos")
                        .HasForeignKey("IdUsuarioCliente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disponibilidade");

                    b.Navigation("UsuarioCliente");
                });

            modelBuilder.Entity("Agenda.Dominio.Entidades.Disponibilidade", b =>
                {
                    b.HasOne("Agenda.Dominio.Entidades.Servico", "Servico")
                        .WithMany("Disponibilidades")
                        .HasForeignKey("IdServico")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("Agenda.Dominio.Entidades.Endereco", b =>
                {
                    b.HasOne("Agenda.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Enderecos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agenda.Dominio.Entidades.Servico", b =>
                {
                    b.HasOne("Agenda.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Servicos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agenda.Dominio.Entidades.Disponibilidade", b =>
                {
                    b.Navigation("Agendamentos");
                });

            modelBuilder.Entity("Agenda.Dominio.Entidades.Servico", b =>
                {
                    b.Navigation("Disponibilidades");
                });

            modelBuilder.Entity("Agenda.Dominio.Entidades.Usuario", b =>
                {
                    b.Navigation("Agendamentos");

                    b.Navigation("Enderecos");

                    b.Navigation("Servicos");
                });
#pragma warning restore 612, 618
        }
    }
}
